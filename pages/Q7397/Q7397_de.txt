Software [ˈsɒf(t)wɛː] (engl.; wörtlich „weiche Ware“, soft = leicht veränderbare Komponenten als Gegenstück zu ‚Hardware‘ für die physischen Komponenten) ist ein Sammelbegriff für Computerprogramme und die zugehörigen Daten. Sie kann zusätzlich Bestandteile wie z. B. die Softwaredokumentation als Handbuch in digitaler oder gedruckter Form enthalten.
Software bestimmt, was ein softwaregesteuertes Gerät tut und wie es das tut. Die Hardware (das Gerät selbst) führt Software aus (arbeitet sie ab) und setzt sie so in die Tat um. Software ist die Gesamtheit von Informationen, die man der Hardware hinzufügen muss, damit ein softwaregesteuertes Gerät für ein definiertes Aufgabenspektrum nutzbar wird.
Durch das softwaregesteuerte Arbeitsprinzip kann eine starre Hardware individuell arbeiten. Es wird heute nicht nur in klassischen Computern angewendet, sondern auch in vielen eingebetteten Systemen wie beispielsweise in Waschmaschinen, Fernsehgeräten, Mobiltelefonen und Navigationssystemen.


== Definition ==
Der Begriff Software ist bis heute nicht einheitlich und auch nicht eindeutig definiert. Das geht u. a. darauf zurück, dass „innerhalb der Softwaretechnik […] eine einheitliche solide, konsistente und systematische Begriffsbildung durch eine hohe Innovationsgeschwindigkeit und Praxisnähe behindert“ wird. Es existieren daher verschiedene Definitionen, die sich je nach Autor und Kontext oft auch nur in Details unterscheiden.
Die Bezeichnung Software wird im allgemeinen Sprachgebrauch meist nur auf Programme bezogen, nicht aber auf andere Daten. Daneben können aber auch der Quelltext, weitere Daten oder die Dokumentation je nach Definition hinzugezählt werden.
Außerdem wird Software auch als Gattungsbegriff für unterschiedliche Arten von Programmen verwendet (Grafiksoftware, Anwendungssoftware, Standardsoftware, Sicherheitssoftware u. v. a.).


=== Etymologie ===
Der Ausdruck Software ist ein Kunstwort, das von John W. Tukey im Jahr 1958 im American Mathematical Monthly als Gegenstück zu dem wesentlich älteren Wort Hardware das erste Mal verwendet wurde. Dabei bezeichnet Hardware alle physischen Bestandteile eines Computers. In diesem Sinn könnten unter Software – als dem Gegenstück zur Hardware – grundsätzlich alle elektronisch gespeicherten Daten verstanden werden. Als Definition genügt diese Sichtweise jedoch nicht.


=== Definitionen nach ISO/IEC-Norm 24765 ===
Die aktuelle ISO/IEC-Norm 24765 ersetzte die DIN-Norm 44300 und enthält für Software folgende Definitionen:

Software ist ein Programm oder eine Menge von Programmen, die dazu dienen, einen Computer zu betreiben.
Software sind Programme sowie die zugehörige Dokumentation.
Software sind Programme und ggf. die zugehörige Dokumentation und weitere Daten, die zum Betrieb eines Computers notwendig sind.
Welche dieser Definitionen zutrifft, hängt vom jeweiligen Kontext ab, wobei auch hier die Übergänge fließend sind.
Software als Programm
In der Softwaretechnik besteht Software aus „Computerprogrammen in jeder Erscheinungsform, vom Quelltext bis zum direkt ausführbaren Maschinencode“. Computerprogramme bestehen oft aus mehreren Komponenten, die sich auch über mehrere Dateien verteilen können.
Software als Programm und Dokumentation
Im Softwarerecht (oft im Zusammenhang mit dem Softwareerwerb) wird Software auch als Softwareprodukt bezeichnet, das „als Beiwerk zusätzlich Bestandteile wie z. B. die Dokumentation in digitaler oder gedruckter Form enthalten kann oder muss“. So auch im Urheberrecht, bei dem das Entwurfsmaterial zur Software gehört, wie der Quelltext, auch Quellprogramm genannt. D. h. der Urheberrechtsschutz gilt i. d. R. auch für den Quellcode [als Schutzgegenstand].
Software als Programm, Dokumentation und Daten
Einige Definitionen nennen neben dem Programm selbst (und evtl. der Dokumentation) auch weitere Daten als zur Software gehörend („zugehörige Daten“). Im Glossar des IEEE für Softwareentwickler werden Beispiele für derartige nicht-ausführbare Softwareteile genannt, wie Schriftarten, Grafiken, Audio- und Videoaufzeichnungen, Vorlagen, Wörterbücher, Dokumente und Informationsstrukturen (wie Datenbank-Datensätze).
Weiterhin gibt es Software-Definitionen, die sämtliche Daten umschließen, die das Computerprogramm nutzt und darüber hinaus auch die Dokumentation einbeziehen. Demgegenüber gibt es auch Definitionen, die sowohl die Dokumentation als auch die zur Verarbeitung vorgesehenen Daten ausschließen.
Eine klare Trennlinie, die beschreibt, welche Daten konkret gemeint sind, ist jedoch nicht näher definiert (z. B. die zu verarbeitenden Daten oder welche Daten ‚notwendig‘ oder ‚zugehörig‘ sind).


== Geschichte ==
In den 1950er Jahren waren Software und Hardware noch verbunden und als Einheit wahrgenommen. Die Software war dabei Teil der Hardware und wurde als Programmcode bezeichnet. 1958 prägte der Statistiker John W. Tukey den Begriff Software erstmals.
Später sorgte dann die Entscheidung der US-Regierung in den 1970er Jahren für eine Neuheit, dass IBM auf Rechnungen Software und Hardware getrennt zu berechnen und aufzuführen habe. Das entsprach einer Anerkennung der Einzelhaftigkeit von Software von offizieller Seite und einer endgültigen Aufspaltung von Hardware und Software bzw. einer Abgrenzung der Software von der Hardware.
Dieser Entwicklung folgte dann in den 1970er Jahren die Gründung von Firmen, die erstmals nur mit Software handelten und nur Software und keine Hardware entwickelten. Zu diesen Firmen gehörte in den USA Microsoft und in Deutschland SAP. Die Existenz solcher Firmen erscheint im 21. Jahrhundert als Selbstverständlichkeit, stellte damals jedoch eine erhebliche Neuerung dar.
Der logische Übergang zwischen Hard- und Software lässt sich an den frühen Spielhallenspielen verdeutlichen, wie das Spiel Breakout, das im April 1976 veröffentlicht wurde. Damals bestand deren komplettes Programm (der Ablauf, die Logik) bildlich gesehen aus „vorverdrahteten Schalttafeln“. Das von Atari produzierte Spielhallengerät verwendete keinen Prozessor. Bereits ein Jahr später, als das Spiel für den Computer programmiert wurde und man anfing, bei prozessorgesteuerten Geräten zwischen den Begriffen ‚Hardware‘ und ‚Software‘ zu unterscheiden, gab es Breakout als Software. Das Spiel bestand nicht mehr aus „vorverdrahteten Schalttafeln“, sondern aus Anweisungen für einen Prozessor inklusive der für die Abarbeitung notwendigen weiteren Informationen, die gemeinsam auf einem Datenträger hinterlegt wurden.


== Besondere Merkmale ==


=== Software ist immateriell ===
Software ist immateriell und besteht aus den Sprachen und Notationen, in denen sie formuliert ist. Software kann zwar auf bestimmten Medien gespeichert, gedruckt, angezeigt oder transportiert werden. Diese sind aber nicht die Software, sondern sie enthalten sie nur.
Es ist zwar vorstellbar, Bits sichtbar und greifbar auf einem Trägermedium zu hinterlegen, doch grundsätzlich ist ‚Software‘ ein abstrakter, von Trägermedien unabhängiger Begriff. Das trifft für den Gattungsbegriff ohnehin zu, aber auch für konkrete Ausprägungen wie ein bestimmtes Anwendungsprogramm. Als Analogie dazu ist es für den Begriff ‚Oper‘ oder ‚Zauberflöte‘ nicht begriffsbestimmend, ob sie im Theater aufgeführt, über Radio/TV übertragen oder als CD verkauft oder gehört wird, ob sie im Opernführer beschrieben oder in der Partitur aufgezeichnet ist.


=== In Details unterschiedliche Bedeutungen ===
Im Zusammenhang mit der Ausführung auf einem Computer wird unter Software primär alles verstanden, was auf dem Rechner ausgeführt werden kann (das Programm im engeren Sinn, bestehend aus Befehlen und Datendefinitionen). Dazu kommen die mit den Programmen verbundenen Ressourcen, die zum Betrieb der Software erforderlich sind. Das sind, abhängig von den verwendeten Entwicklungswerkzeugen, zum Beispiel Konfigurationsdateien, Schriftart-Dateien, Lookup-Tabellen, Datenstrukturen für Datenbanken etc.
In engstem Sinn wäre unter ‚Software‘ nur von der Hardware ausführbarer Maschinencode zu verstehen. Jedoch fällt darunter auch alles, was durch beliebige ‚interpretierende Systeme‘, die Teil der Systemsoftware sind, ausgeführt werden kann, wie das bei Verwendung höherer Programmiersprachen und Entwicklungsumgebungen nahezu immer der Fall ist.
So ist auch der Quellcode in der Softwareentwicklung (als wesentlicher Arbeitsgegenstand) und in der Qualitätssicherung (als bedeutender Prüfgegenstand; Details siehe Softwarequalität) ein wesentliches Software-Artefakt.
Sprachlich wird der Ausdruck ‚Software‘ unterschiedlich verwendet: Er steht für konkret benannte Komponenten (Programm XY, Unterprogramm ABC, Konfigurationsdatei XXX.INI). Er wird als Sammelbegriff für unterschiedliche Gesamtheiten/Mengen von Programmen benutzt, zum Beispiel für eine aus vielen Einzelprogrammen bestehende Buchhaltungssoftware (siehe Software-System), für alle Anwendungen eines Unternehmens („unsere Unternehmenssoftware“), oder als Typ-/Gattungsbegriff für unterschiedliche Arten von Software (wie Grafiksoftware, Standardsoftware, Systemsoftware etc.).


=== Fließende Grenze zwischen Software und Daten ===
Zur Verarbeitung bestimmte Daten zählen im allgemeinen Sprachgebrauch nicht zum Begriff Software. Jedoch ist die Grenze zwischen Software und Daten fließend, denn je nach Situation können Daten und Programme in unterschiedlichen Rollen auftreten und die Begriffe dabei vertauscht werden:

Auf der Dateiebene können Mischformen auftreten, beispielsweise in Office-Dokumenten oder bei einer Tabellenkalkulationsdatei. Hier enthält eine Datei sowohl Daten im Sinne von das Bearbeitete (Texte oder Zelleninhalte) als auch funktionale Anweisungen (Makroanweisungen, Zellformeln).
Vertauscht sind die Rollen beispielsweise, wenn ein Quellprogramm von einem Compiler in ein Maschinenprogramm umgewandelt wird: Sowohl das Quellprogramm als auch das erzeugte Binärprogramm sind ‚Daten‘, der Compiler ist die Software. Ebenso verwendet ein Interpreter ein Quellprogramm oder ein Emulator ein Binärprogramm als Daten und erzeugt daraus speicherintern den ausführbaren Code. Die so verarbeiteten Programmdateien sind Software, rollenspezifisch aber gleichzeitig Daten.
Dieser Zusammenhang, dass ein Programm sowohl als Daten als auch als Funktion auftreten kann, ist zentral in verschiedenen Disziplinen der Informatik, darunter die theoretische Informatik (u. a. Rekursionstheorie, Automatentheorie, Domaintheorie) und die technische Informatik (z. B. Von-Neumann-Architektur).


=== Unterscheidung zwischen Hard- und Software ===
Je nach Zusammenhang ist bei der Unterscheidung zwischen Hard- und Software eine oder mehrere der folgenden Bedeutungen gemeint:

Leicht veränderbare Komponente (Software) vs. schwer veränderbare Komponente (Hardware) in einem Computerdesign.
Instruktionskode (Software) vs. universelle Maschine (Hardware).
Nicht-greifbar im Sinne von Funktionsbestandteilen eines Computersystems, die sich „nicht anfassen lassen“ (Software) vs. greifbare Komponenten (Hardware). Software ließe sich über eine Telefonleitung übertragen, Hardware dagegen nicht.
Die Gegensätze sind in der englischsprachigen Begriffsprägung (soft=weich, hard=hart) beabsichtigt.


== Verschiedene Blickwinkel ==
Software kann aus vielen unterschiedlichen Gesichtspunkten betrachtet werden, zum Beispiel:


=== Zusammenwirken mit der Hardware (Execution) ===

Obwohl dem Begriff ‚Software‘ teilweise Attribute wie Flexibilität, Individualität, Leistungsfähigkeit etc. zugeschrieben werden, wird letztlich alles, was der Computer ‚tatsächlich tut‘, nicht von der Software, sondern ausschließlich durch die Hardware ausgeführt. Software ‚beschreibt‘ lediglich, was getan werden soll und in welcher Form das geschieht.
Dazu wird auf unterster Ebene der Maschinencode der Software unter Nutzung des Betriebssystems (d. h. ebenfalls durch dessen Maschinenbefehle) in den Hauptspeicher des Computers geladen und dem Rechenwerk Schritt für Schritt (siehe Befehlszähler) zur Ausführung zugeführt. Dieses Arbeitsprinzip gilt für jede Art von Software, auch wenn sie z. B. von Interpretern ausgeführt wird: Diese sind ebenfalls Software, deren Maschinencode an der Hardwareschnittstelle ebenfalls wie beschrieben ausgeführt wird und die Maschinenbefehle nur speicherintern erzeugt. Auch Compiler, Makroprozessoren und jede andere Art von Systemsoftware werden nach diesem Prinzip ausgeführt.
Der Maschinencode muss dafür in einer Form/Struktur vorliegen, die von der Hardware über deren darin implementierte Schnittstelle interpretiert und ausgeführt werden kann. Die Befehle zeigen durch ihren Inhalt und ihre Struktur an, was zu tun ist, welche Datenbereiche im Hauptspeicher dabei benutzt oder verändert werden sollen (über im Befehl enthaltene Adressierungsangaben) und gegebenenfalls an welcher Stelle das Programm fortzusetzen ist.
Bei der Ausführung wirken also viele Schichten zusammen und führen als Gesamtheit zu Zustandsänderungen in der Hardware bzw. final zu den vorgesehenen Ergebnissen, etwa der Ausgabe einer Druckzeile, einem Datenzugriff oder der Anzeige eines Feldinhalts am Bildschirm. Bei in höheren Programmiersprachen entwickelten Anwendungen können so schon für relativ einfache Funktionen (wie Lesen aus der Datenbank) oft Hunderttausende oder Millionen von Maschinenbefehlen durchlaufen werden.
Das in modernen Computern mögliche parallele Ausführen mehrerer Programme/Prozesse wird im Wesentlichen durch das Betriebssystem bewirkt, das bei bestimmten Ereignissen den Wechsel von einer zur anderen Task einleitet und verwaltet. Siehe auch Multitasking.
Im systematischen Zusammenwirken vieler Komponenten, das nur unter Anwendung klar definierter Schnittstellen möglich ist, „gehört Software also zu den komplexesten Artefakten, die Menschen bislang geschaffen haben“.
Die Software trägt zudem maßgeblich dazu bei, wie effizient die Hardware genutzt wird. Je nach Gestaltung der Algorithmen können mit derselben Hardware unterschiedliche Systemleistungen erreicht werden.


=== Entwicklung ===

Die Entwicklung von Software ist ein komplexer Vorgang. Dieser wird durch die Softwaretechnik, ein Teilgebiet der Informatik, systematisiert. Hier wird die Erstellung der Software schrittweise in einem Prozess von der Analyse über die Softwaremodellierung bis hin zum Testen als wiederholbarer Prozess beschrieben.
In aller Regel wird die Software nach der Entwicklung mehrfach angepasst und erweitert. Der Software-Lebenszyklus kann durchaus mehrere Jahre betragen.

Software wird unter Nutzung bestimmter Verfahren, Methoden und ‚Werkzeuge‘ entwickelt. Dabei werden unterschiedliche Entwicklungsstadien durchlaufen, in denen jeweils unterschiedliche Zwischenstände der Software entstehen: Analysetätigkeiten (zahlreiche Entwicklungsdokumente) > Programmierung (Quellcode) > im Betrieb (Maschinencode oder ausführbarer Code). Im engeren Sinn der Ausführung auf dem Computer gilt lediglich Letzteres als ‚Software‘. Siehe auch Softwareentwicklung.
In diesem Zusammenhang ist Software Bearbeitungsgegenstand von Systemprogrammen: Wenn z. B. ein Compiler den Quellcode eines Programms liest, verarbeitet und einen Maschinen- oder Zwischencode erzeugt, so sind das aus dessen Sicht ‚Daten‘.
Einmal erzeugte Software kann mit verhältnismäßig geringen Kosten vervielfältigt werden, die meist durch Datenträger, Werbung und das Herstellen von Verpackung und zu Papier gebrachten Dokumentationen anfallen.
Software verschleißt nicht durch Nutzung, unterliegt jedoch mit der Zeit der Softwarealterung.
Software ist meist austauschbar, fähig zur Aktualisierung, korrigierbar und erweiterbar, insbesondere dann, wenn bestehende Richtlinien eingehalten werden und der Quelltext verfügbar ist.
Software tendiert dazu, umso mehr Fehler zu enthalten, je komplexer sie ist. Fehler werden in aktualisierten Softwareversionen oder mithilfe eines Patches und i. d. R. nach Durchführung von Softwaretests behoben. Softwarefehler bezeichnet man auch als Programmfehler oder als „Bugs“.
Weil Software unter Einsatz vieler unterschiedlicher Programmiersprachen und in vielen unterschiedlichen Betriebssystemen und Systemumgebungen entwickelt werden kann, sind Softwarestandards erforderlich, um Informationen system- und unternehmensübergreifend ‚verstehbar‘ und austauschbar zu machen. Siehe auch Elektronischer Datenaustausch (Beispiele), Programmierstil.


=== Auswahl ===

In der Entscheidung zur Anschaffung von Software lässt sich i. W. der Einsatz von Standardsoftware oder die eigene Herstellung (Individualsoftware) unterscheiden. Besonders im betrieblichen Umfeld zieht diese Entscheidung häufig hohe Kosten nach sich. Auch können solche Entscheidungen Grundlage zur Umsetzung der Unternehmensstrategie sein oder sollen Unternehmensprozesse maßgeblich verbessern. Zur Vermeidung von Fehlinvestitionen sollte der Anschaffung ein systematischer Entscheidungsprozess vorausgehen.


=== Betrieb ===

Der Einsatz von Software erfordert je nach Einsatzbereich ein gewisses Maß an Organisation, um die zusammengehörenden Teile richtig einzusetzen und durch neue Versionen abzulösen (zum Beispiel in größeren Unternehmen im Releasemanagement).
Mitunter kann Software vorkonfiguriert werden, um so eine Neuinstallation zu beschleunigen und um Fehler bei der Konfiguration zu minimieren.


=== Software aus Sicht der Betriebswirtschaft und Arbeitssoziologie ===
Im Wesentlichen für betriebliche Anwendungssoftware geltend kann Software aus (betriebs-)wirtschaftlicher Sicht als ‚im Voraus geleistete geistige Arbeit‘, also als Investition betrachtet werden. Zum Beispiel erarbeiten die Programmautoren ein Lösungsverfahren für die korrekte Trennung aller deutschen Wörter in einem Textverarbeitungsprogramm. Damit ist im Voraus, also bevor diese Tätigkeit tatsächlich anfällt, schon für alle Schreiber, die mit diesem Textverarbeitungsprogramm arbeiten, die geistige Arbeit „korrektes Trennen deutscher Wörter“ geleistet. Dabei wird die Eigenschaft von Computern genutzt, auf sie verlagerte Aufgaben erheblich schneller und zuverlässiger ausführen zu können als es bisher Menschen möglich war. Besonders auch in der Softwareentwicklung wird intensiv auf „im Voraus“ entwickelte Algorithmen und Codeteile – als Teile eines Programms – zurückgegriffen (‚Software-Wiederverwendung‘).
Ein ähnlicher Zusammenhang wird in der Arbeitssoziologie gesehen: Derartige softwarebasierte Maßnahmen sind geeignet, Arbeitsinhalte und -abläufe erheblich zu verändern. Die Bandbreite reicht dabei vom Bereitstellen einfacher Hilfsmittel (etwa zur Summierung oder Durchschnittsermittlung) bis hin zur völligen Umgestaltung von Prozessen (durch Konzentration früher getrennter oder durch Zerlegung früher zentralisierter Arbeitsabläufe) – oder gar bis zu deren vollständigem Ersatz durch IT-Lösungen. Brödner u. a. nennen das „materialisierte“ Kopfarbeit. Siehe auch Rationalisierung, Optimierung, Taylorismus.


=== Qualität ===
 
Für die Erstellung und den Betrieb von Software wurden bestimmte Qualitätskriterien festgelegt. Diese sollen als  funktionale oder nicht-funktionale Eigenschaften von Software implementiert werden und beziehen sich auf die Funktionalität, Zuverlässigkeit, Benutzbarkeit, Effizienz, Änderbarkeit und Übertragbarkeit.
Detailliertere Angaben zu jedem dieser Haupt-Qualitätskriterien nennt beispielsweise die Norm ISO/IEC 9126. Für jeden Einzelfall von Softwareerstellung soll/kann festgelegt werden, welche konkreten  Anforderungen im Detail zu berücksichtigen sind.


== Kategorisierung ==
Nach ISO/IEC 2382 wird Software wie folgt gegliedert (und bezeichnet):

Systemsoftware: Anwendungsunabhängige Software, die das Ausführen von Anwendungssoftware ermöglicht bzw. unterstützt (z. B. Betriebssystem, sowie Gerätetreiber und Dienstprogramme)
Unterstützungssoftware, d. h. Programme, die bei der Entwicklung, Wartung helfen oder eine nicht-anwendungsspezifische Leistung erbringen (z. B. Editoren, Compiler, Virenscanner, Datenbankmanagementsysteme, …)
Anwendungssoftware, die den Benutzer bei der Ausführung seiner Aufgaben unterstützt und ihm dadurch erst den eigentlichen, unmittelbaren Nutzen stiftet (z. B. eine Tabellenkalkulation).
Unterteilung nach dem Grad der Individualität

Standardsoftware wird von einem Softwareanbieter zum Einsatz bei mehreren/vielen Kunden erstellt, die diese Software erwerben können.
Individualsoftware wird für einen einzelnen Anwender zur Lösung einer spezifischen Aufgabenstellung individuell erstellt oder modifiziert, alternativ durch einen Softwareanbieter oder durch eigene Entwickler bzw. Entwicklungsabteilungen eines Unternehmens.
Rechtlich wird beim Erwerb von Software zwischen Individualsoftware und Standardsoftware unterschieden: Für Individualsoftware wird ein Werkvertrag bzw. Werklieferungsvertrag abgeschlossen, der Erwerb von Standardsoftware gilt als Sachkauf.
Unterteilung nach der Art der erzeugten Ergebnisse
Diese entstehen im Verlauf des Herstellungsprozesses von Software und können beispielsweise sein:

Quellcode, Zwischencode, Maschinencode, Gerätetreiber und andere erforderliche Module (als Programmbibliothek ausgeliefert)
Installationsprogramme und dazugehörende Anweisungen
Weitere Unterlagen wie die Dokumentation für Softwareentwickler und Softwarebenutzer
Unterteilung nach der Art der Einbettung

Nicht eingebettete Software, die nachträglich installiert wird
Fest in einem Gerät zu dessen Steuerung untergebrachte Software (z. B. in einem ROM oder als Teil eines eingebetteten Systems) bezeichnet man als Firmware oder auch als eingebettete (oder ‚embedded‘) Software
Einstufung nach Nutzungsrecht (Lizenz)

Adware, Software mit Werbeeinblendungen
Beerware, frei benutzbar, verbunden mit der Bitte, dem Autor ein Bier auszugeben
Cardware, auch Postcardware genannt, vergleichbar auch: Emailware, frei benutzbar, verbunden mit der Bitte, dem Autor eine Postkarte (oder E-Mail) zu schicken; die Lizenz bleibt beim Autoren
Careware
Crippleware
Donationware
Freeware
Nagware
Shareware
Freie Software
Unterteilung nach Quellcode-Verfügbarkeit

Freie Software
Open Source
Proprietäre Software
Einstufung nach Verfügbarkeit

Abandonware, veraltete Produkte, die nicht mehr gewartet und unterstützt werden
Vaporware, Software, die nach Ankündigung nicht oder verspätet erscheint
Weitere Softwarebegriffe

Portable Software: Auf verschiedenen Computer(typen) lauffähig
Native Software: Zur Ausführung auf einem bestimmten Computersystem erstellt oder kompiliert. Der Programmcode nutzt die individuelle Funktionalität eines bestimmten Systemtyps, Allgemeingültigkeit und Portabilität gelten nicht als Entwicklungsziel.
Bananenware (unausgereifte Software, die nach der Auslieferung „reift“)
Schlangenöl (Programm ohne echte Funktion, wird aber als Wundermittel angepriesen)
Shovelware (Sammlung von Software, wobei die Quantität zählt)
Riskware
Bloatware (mit Funktionen ohne synergetischen Nutzen überladene Software)
Crapware
Spyware
Gebraucht-Software


== Lizenzmodelle ==
Die Verbreitung und Nutzung von Software unterliegt dem Urheberrecht. In diesem Zusammenhang gibt es mehrere typische Überlassungsmodelle:

Verkauf
Der vollständige Verkauf von Software, inklusive der Überlassung von Weiterverbreitungsrechten, kommt praktisch nur zwischen Unternehmen vor, in der Regel im Rahmen von Auftragsprogrammierung oder beim Verkauf eines Softwareentwicklungsunternehmens.
Nutzungsrecht
Bei der meisten Software, die zum Beispiel für PCs „gekauft“ werden kann, wird in Wirklichkeit nur ein Nutzungsrecht überlassen. Dieses Modell ist auch bei der Auftragsprogrammierung üblich, bei der ein Unternehmen ein Programm für den Eigengebrauch eines anderen Unternehmens speziell entwickelt. Bei Freeware ist dieses Recht kostenlos, was nicht mit freier Software verwechselt werden darf.
Software as a Service
Die Software wird bei einem Dienstleister gehostet, die eigentliche Nutzung der Software kann entweder pro Zeitraum oder pro Nutzungseinheit berechnet werden. Sie wird oft auf einem einfachen PC, evtl. nur über einen Webbrowser ausgeführt.
Freie Software/Open Source/GPL
Freie Software darf von jedem genutzt, beliebig verändert und weiterverbreitet werden. Oft unterliegt dieses Recht gewissen Einschränkungen, wie zum Beispiel der Nennung des Autors oder der Verpflichtung, veränderte Versionen unter die gleiche Lizenz zu stellen (GPL). Software, die nicht zu dieser Gruppe zählt, wird proprietär genannt.
Zwischen den oben genannten Hauptformen der Softwareverbreitung gibt es zahlreiche Zwischen- und Mischstufen.


== Freie Software und Open Source ==

‚Freie Software‘ ist eine soziale Bewegung, die unfreie Software als gesellschaftliches Problem begreift. Wobei „frei“ hier nicht ‚kostenlos‘ bedeutet (‚Freie Software‘ ist nicht dasselbe wie ‚Freeware‘), sondern die Freiheiten für die Gesellschaft meint, die ein derart lizenziertes (auch kommerzielles) Produkt bietet. In den Augen der von Richard Stallman 1985 gegründeten Free Software Foundation (FSF) ist die Entscheidung für oder gegen freie Software deshalb primär eine ethische und soziale Entscheidung.
Dagegen begreift die 1998 gegründete Open Source Initiative (OSI) quelloffene Software als bloßes Entwicklungsmodell, wobei die Frage, ob Software quelloffen sein sollte, dort eine rein praktische und keine ethische Frage darstellt. Die FSF wirft der OSI daher eine Ablenkung von den wesentlichen Punkten vor. Eric S. Raymond hat den Begriff ‚Open Source‘ in der Annahme eingeführt, dass das unpopuläre Thema ‚Freiheit‘ Geldgeber für solche Projekte abschrecken könne.
Auch wenn es sich heute um zwei unterschiedliche Bewegungen mit unterschiedlichen Ansichten und Zielen handelt, verbindet sie die gemeinsame Wertschätzung für quelloffenen Code, was in zahlreichen Projekten mündet, in denen sie zusammenarbeiten.


== Siehe auch ==
Softwarekrise
ISO/IEC 9126 (Softwarequalität nach ISO)
Softwareunternehmen


== Literatur ==
John W. Tukey: The Teaching of Concrete Mathematics. In: The American Mathematical Monthly. Vol. 65, no. 1, Jan. 1958, S. 2. (Erstmalige Verwendung des Begriffs Software im heutigen Sinn), JSTOR:2310294
F. R. Shapiro: Origin of the term software: Evidence from the JSTOR electronic journal archive. In: IEEE Annals of the History of Computing. 22, April–Juni 2000, S. 69.
Friedrich Kittler: „Es gibt keine Software“. In: ders.: Draculas Vermächtnis. Technische Schriften. Reclam, Leipzig 1993, ISBN 3-379-01476-1.
Sebastian von Engelhardt: Die ökonomischen Eigenschaften von Software. (= Jenaer Schriften zur Wirtschaftswissenschaft. 14/2006). Friedrich-Schiller-Universität Jena, Wirtschaftswissenschaftliche Fakultät, ISSN 1611-1311. (ideas.repec.org)


== Weblinks ==

Software-Wiki
Geschichte der Softwareprogrammierung
Software’s origin (englisch)
Ursprung des Wortes Software (englisch)


== Einzelnachweise ==